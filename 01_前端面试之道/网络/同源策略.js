


// 同源策略主要表现在以下三个方面：DOM、Web 数据和网络。

// DOM 访问限制：同源策略限制了网页脚本（如 JavaScript）访问其他源的 DOM。
// 这意味着通过脚本无法直接访问跨源页面的 DOM 元素、属性或方法。
// 这是为了防止恶意网站从其他网站窃取敏感信息。


// Web 数据限制：同源策略也限制了从其他源加载的 Web 数据（例如 XMLHttpRequest 或 Fetch API）。
// 在同源策略下，XMLHttpRequest 或 Fetch 请求只能发送到与当前网页具有相同源的目标。
// 这有助于防止跨站点请求伪造（CSRF）等攻击。


// 网络通信限制：同源策略还限制了跨源的网络通信。
// 浏览器会阻止从一个源发出的请求获取来自其他源的响应。
// 这样做是为了确保只有受信任的源能够与服务器进行通信，以避免恶意行为。


// 出于安全原因，浏览器限制从脚本内发起的跨源 HTTP 请求，
// XMLHttpRequest 和 Fetch API，只能从加载应用程序的同一个域请求 HTTP 资源，
// 除非使用 CORS 头文件

